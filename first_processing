import time
import os.path
import numpy as np
import csv
import tensorflow as tf
import keras.backend as K
from keras import optimizers
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mplt
from keras import layers
from keras import models
import glob
import scipy.misc as msc
import scipy.ndimage.morphology as morf


class Cleaner():
    def __init__(self):
        self.he= 1668
        self.wi = 1179
        self.fronte = image.load_img('gali1.jpeg',target_size=(self.he,self.wi))
        self.retro = image.load_img('gali2.jpeg',target_size=(self.he,self.wi))
        self.x = image.img_to_array(self.fronte)        
        self.x = (self.x / 255.).astype(np.float32)
        self.y = image.img_to_array(self.retro)        
        self.y = (self.y / 255.).astype(np.float32)
        self.my_net()
        
    def my_net(self):
        self.image_tensor=self.x
        self.image_tensor = np.expand_dims(self.image_tensor,axis=0)
        self.y = np.expand_dims(self.y, axis = 0)        
        self.image_tensor = np.append(self.image_tensor,self.y,axis=0)
        self.image_tensor = np.expand_dims(self.image_tensor, axis=0)
        input_imt = layers.Input(shape=(2,self.he, self.wi, 3))
        print(input_imt.shape)
        network_output = self.main_elab(input_imt)
        
        modello= models.Model(inputs=[input_imt], outputs=[network_output]) 
        modello.compile(loss = 'binary_crossentropy',
                   optimizer = optimizers.RMSprop(lr=1e-4),
                   metrics=['acc'])
        
        er = modello.predict(self.image_tensor)             
        
        self.img_ret = er[0][1] 
    def main_elab(self,image_tensor):        
        x = self.elab_block(image_tensor)
        for i in range(45):
            x= self.elab_block(x)
            
          
        return x
    
    def elab_block(self,y):
        groups=[]
        groups2=[]
        groups3=[] 
        for j in range(2):
            group = layers.Lambda(lambda z: z[:,j,:,:])(y) 
            groups.append(group)          
        group2 = layers.Average()([groups[0], groups[1]])        
        groups2.append(group2)         
        group2 = layers.Subtract()([groups[0], groups[1]])
        group2= layers.AveragePooling2D(pool_size=(1,1),strides=(1,1))(group2)  
        groups2.append(group2)       
        for gr in groups2:
            gr = layers.Lambda(lambda i : K.expand_dims(i, axis=1))(gr)
            groups3.append(gr)
        y= layers.concatenate(groups3,axis=1)
        y= layers.BatchNormalization()(y)  
        return y
        
def bin_action(img):
    h, w =img.shape
    binout= img
    trashold = 2
    for i in range(h):
        for j in range(w):
            if (img[i][j]<trashold):
                img[i][j]=0
            else:
                img[i][j]= 1           
    return binout 



def rgb2gray(rgb):
    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]
    gray = 0.2989 *r + 0.5870 * g + 0.1140 * b
    return gray
def my_dilation(im):
    h, w = im.shape
    for i in range (h-2):        
        altezza = i+1
        for j in range(w-2):
            larghezza = j+1            
            b =im[altezza-1][larghezza]            
            d =im[altezza][larghezza-1]
            e =im[altezza][larghezza+1]            
            g =im[altezza+1][larghezza]
           
            if ((d+e<1)or
                (b+g<1) ):
                im[altezza][larghezza]=0
    return im           

r = Cleaner() 
im = rgb2gray(r.img_ret);

kernel=[[0,0,0],[0,0,0],[0,0,0]]
bini = bin_action(im)
last = my_dilation(bini)
lat = my_dilation(last)
lat = my_dilation(last)
plt.imshow(last)
msc.toimage(last, cmin=0.0, cmax=1).save('retropulito.jpg')
